version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: tourist-village-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: tourist_village_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - tourist-village-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d tourist_village_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Service
  backend:
    build:
      context: ./packages/backend
      dockerfile: Dockerfile
    container_name: tourist-village-backend
    restart: unless-stopped
    environment:
      # Database Configuration
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: tourist_village_db
      DB_USER: postgres
      DB_PASSWORD: password
      DATABASE_URL: postgresql://postgres:password@db:5432/tourist_village_db
      
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-super-secret-refresh-key-change-this-in-production}
      JWT_EXPIRES_IN: 60m
      JWT_REFRESH_EXPIRES_IN: 7d
      
      # Server Configuration
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3000
      FRONTEND_URL: http://localhost:3000
      
      # Security Configuration
      BCRYPT_ROUNDS: 12
    ports:
      - "3001:3000"
    volumes:
      - ./packages/backend:/usr/src/app
      - /usr/src/app/node_modules
      - /usr/src/app/dist
    networks:
      - tourist-village-network
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Service
  frontend:
    build:
      context: ./packages/frontend
      dockerfile: Dockerfile
    container_name: tourist-village-frontend
    restart: unless-stopped
    environment:
      VITE_API_URL: http://localhost:3001/api
      NGINX_HOST: localhost
      NGINX_PORT: 80
    ports:
      - "3000:80"
    networks:
      - tourist-village-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (Optional - for session management and caching)
  redis:
    image: redis:7-alpine
    container_name: tourist-village-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tourist-village-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PgAdmin (Optional - for database management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: tourist-village-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@touristvillage.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - tourist-village-network
    depends_on:
      - db

# Development Override Services
  # Backend Development Service (for hot reload)
  backend-dev:
    build:
      context: ./packages/backend
      dockerfile: Dockerfile
      target: build
    container_name: tourist-village-backend-dev
    restart: unless-stopped
    environment:
      # Database Configuration
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: tourist_village_db
      DB_USER: postgres
      DB_PASSWORD: password
      DATABASE_URL: postgresql://postgres:password@db:5432/tourist_village_db
      
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-super-secret-refresh-key-change-this-in-production}
      JWT_EXPIRES_IN: 60m
      JWT_REFRESH_EXPIRES_IN: 7d
      
      # Server Configuration
      NODE_ENV: development
      PORT: 3000
      FRONTEND_URL: http://localhost:3000
      
      # Security Configuration
      BCRYPT_ROUNDS: 12
    ports:
      - "3001:3000"
    volumes:
      - ./packages/backend:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - tourist-village-network
    depends_on:
      db:
        condition: service_healthy
    command: npm run dev
    profiles:
      - dev

  # Frontend Development Service (for hot reload)
  frontend-dev:
    build:
      context: ./packages/frontend
      dockerfile: Dockerfile
      target: build
    container_name: tourist-village-frontend-dev
    restart: unless-stopped
    environment:
      VITE_API_URL: http://localhost:3001/api
    ports:
      - "5173:5173"
    volumes:
      - ./packages/frontend:/app
      - /app/node_modules
    networks:
      - tourist-village-network
    depends_on:
      - backend-dev
    command: npm run dev -- --host 0.0.0.0
    profiles:
      - dev

# Networks
networks:
  tourist-village-network:
    driver: bridge
    name: tourist-village-network

# Volumes
volumes:
  postgres_data:
    driver: local
    name: tourist-village-postgres-data
  
  redis_data:
    driver: local
    name: tourist-village-redis-data
  
  pgadmin_data:
    driver: local
    name: tourist-village-pgadmin-data